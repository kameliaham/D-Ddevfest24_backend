# Generated by Django 5.1.2 on 2024-10-18 14:03

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_id', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='AGV',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machine.machine')),
                ('location', models.JSONField()),
                ('battery_level', models.FloatField()),
                ('load_weight', models.FloatField()),
                ('speed', models.FloatField()),
                ('distance_traveled', models.FloatField()),
                ('obstacle_detection', models.BooleanField()),
                ('navigation_status', models.CharField(max_length=50)),
                ('vibration_level', models.FloatField()),
                ('temperature', models.FloatField()),
                ('wheel_rotation_speed', models.FloatField()),
            ],
            bases=('machine.machine',),
        ),
        migrations.CreateModel(
            name='CNCMachine',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machine.machine')),
                ('spindle_speed', models.IntegerField()),
                ('tool_wear_level', models.FloatField()),
                ('cut_depth', models.FloatField()),
                ('feed_rate', models.FloatField()),
                ('vibration_level', models.FloatField()),
                ('coolant_flow_rate', models.FloatField()),
                ('material_hardness', models.FloatField()),
                ('power_consumption', models.FloatField()),
                ('temperature', models.FloatField()),
                ('chip_load', models.FloatField()),
            ],
            bases=('machine.machine',),
        ),
        migrations.CreateModel(
            name='LeakTestMachine',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machine.machine')),
                ('test_pressure', models.FloatField()),
                ('pressure_drop', models.FloatField()),
                ('leak_rate', models.FloatField()),
                ('test_duration', models.IntegerField()),
                ('temperature', models.FloatField()),
                ('status', models.CharField(max_length=50)),
                ('fluid_type', models.CharField(max_length=50)),
                ('seal_condition', models.CharField(max_length=50)),
                ('test_cycle_count', models.IntegerField()),
            ],
            bases=('machine.machine',),
        ),
        migrations.CreateModel(
            name='PaintingRobot',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machine.machine')),
                ('spray_pressure', models.FloatField()),
                ('paint_thickness', models.FloatField()),
                ('arm_position', models.JSONField()),
                ('temperature', models.FloatField()),
                ('humidity', models.FloatField()),
                ('paint_flow_rate', models.FloatField()),
                ('paint_volume_used', models.FloatField()),
                ('atomizer_speed', models.IntegerField()),
                ('overspray_capture_efficiency', models.FloatField()),
                ('booth_airflow_velocity', models.FloatField()),
                ('solvent_concentration', models.FloatField()),
            ],
            bases=('machine.machine',),
        ),
        migrations.CreateModel(
            name='StampingPress',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machine.machine')),
                ('force_applied', models.FloatField()),
                ('cycle_time', models.FloatField()),
                ('temperature', models.FloatField()),
                ('vibration_level', models.FloatField()),
                ('cycle_count', models.IntegerField()),
                ('oil_pressure', models.FloatField()),
                ('die_alignment', models.CharField(max_length=50)),
                ('sheet_thickness', models.FloatField()),
                ('power_consumption', models.FloatField()),
                ('noise_level', models.FloatField()),
                ('lubrication_flow_rate', models.FloatField()),
            ],
            bases=('machine.machine',),
        ),
        migrations.CreateModel(
            name='WeldingRobot',
            fields=[
                ('machine_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='machine.machine')),
                ('weld_temperature', models.FloatField()),
                ('weld_current', models.FloatField()),
                ('weld_voltage', models.FloatField()),
                ('weld_time', models.IntegerField()),
                ('pressure_applied', models.FloatField()),
                ('arm_position', models.JSONField()),
                ('wire_feed_rate', models.FloatField()),
                ('gas_flow_rate', models.FloatField()),
                ('weld_strength_estimate', models.FloatField()),
                ('vibration_level', models.FloatField()),
                ('power_consumption', models.FloatField()),
            ],
            bases=('machine.machine',),
        ),
    ]
